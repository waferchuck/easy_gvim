set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set number
set autochdir
set ai
set ignorecase
set smartcase 
set sts=4
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
set expandtab
set cindent
"exec 'cd ' . fnameescape('D:\RTC_storage\Local_PurionH_V4.1_Int_t1008097_Workspace\Src\RealTimeApplications')
colorscheme evening
"set guifont=Consolas:h13:cANSI
"set guifont=Cascadia_Mono:h13:cANSI
set guifont=Consolas:h13:cANSI
"set guifont=Cascadia_Code:h13:cANSI

"set the default size of VIM
set lines=75 columns=250
"set the default window postion
winpos 160 700

map <S-h> ^
map <S-l> $
map <S-j> <c-]> "jump to function defination tag"
map <S-t> <c-t> "jump back"
map <S-k> [[ "jump to function head"
nmap { [{
map <S-o> <C-o>
inoremap <C-Space> <C-p>
inoremap <C-i> <C-]>
inoremap <expr> <Tab> getline('.')[col('.')-2] !~ '^\s\?$' \|\| pumvisible()
      \ ? '<C-N>' : '<Tab>'
inoremap <expr> <S-Tab> pumvisible() \|\| getline('.')[col('.')-2] !~ '^\s\?$'
      \ ? '<C-P>' : '<Tab>'
autocmd CmdwinEnter * inoremap <expr> <buffer> <Tab>
      \ getline('.')[col('.')-2] !~ '^\s\?$' \|\| pumvisible()
      \ ? '<C-X><C-V>' : '<Tab>'


" this will use ctrl+h as backspace
imap ^? ^H

let NERDChristmasTree=1

set guioptions-=m "disable menu bar
set guioptions-=T "disable toolbar
set guioptions-=r "disable scrollbar


" inoremap <expr> <Space> pumvisible() ? "\<C-y>" : " "

command! -nargs=+ Grep silent! grep <args> *.c *.cpp ..\Include\*.h| copen | redraw!

"command! -nargs=1 Grep silent! execute 'grep -rnI <args> --include=*.c *.cpp ..\Include\*.h' | copen


command! -nargs=+ RenameFull call RenameFullVariable(<f-args>)

function! RenameFullVariable(old_name, new_name)
    let pattern = '\<' . escape(a:old_name, '\') . '\>'
    let replace = escape(a:new_name, '\')
    execute '%s/'.pattern.'/'.replace.'/g'
endfunction

command! -nargs=+ RenameAny call RenameAnyVariable(<f-args>)
function! RenameAnyVariable(old_name, new_name)
    let pattern = escape(a:old_name, '\')
    let replace = escape(a:new_name, '\')
    execute '%s/'.pattern.'/'.replace.'/g'
endfunction


" set statusline=%F%m%r%h%w\ [%{&fileencoding}]\ %l/%L\ \|%c
highlight StatusLine ctermbg=blue ctermfg=blue
highlight StatusLineNC ctermbg=grey ctermfg=black


"for code suggestion menu, use Enter to choose next and use Tab to confrim
inoremap <expr> <Enter> pumvisible() ? "\<C-n>" : "\<Enter>"
inoremap <expr> <Tab> pumvisible() ? "\<C-y>" : "\<Tab>"


let mapleader=" "
"set jumpoptions=stack
"xnoremap <leader>g :<C-u>Grep <C-R>=escape(@", ' ')<CR> *.c *.h<CR>
"vnoremap <leader>g y:Grep <C-R>" *.c *.cpp ..\Include\*.h<CR>:copen<CR>

"command! -nargs=1 GrepCurrent silent! execute 'vimgrep /<args>/j %' | copen
command! -nargs=1 GrepCurrent silent! execute 'lvimgrep /<args>/j %' | lopen

"use \g to search highlighted keyword
vnoremap <leader>g y:Grep <C-R>" <CR>
"use \G to searrch the whole wold
nnoremap <leader>G :Grep <C-R><C-W> <CR>

"uee \l to list the whole word from the current file
nnoremap <Leader>l :execute 'vimgrep /' . expand('<cword>') . '/j %' \| copen<CR>




"use shift+f to fold and unfold code
nnoremap <S-F> za
set foldmethod=syntax
set foldlevel=99

syntax enable

set undofile
set undodir=$HOME/.vim/undodir

set diffexpr=MyDiff()
function! MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"popout menu color
"highlight Pmenu      ctermfg=white ctermbg=LightBlue guifg=#ffffff guibg=#444444
highlight Pmenu      ctermfg=white ctermbg=LightBlue guifg=#ffffff guibg=grey30
highlight PmenuSel   ctermfg=black ctermbg=yellow guifg=white guibg=MediumPurple
highlight FloatBorder guifg=#ffaa00 guibg=#444444
"make the file name bar look blue
highlight StatusLine guibg=#87afff guifg=black ctermbg=cyan ctermfg=white
highlight StatusLineNC guibg=grey50 guifg=black ctermbg=black ctermfg=grey
highlight QuickFixLine ctermbg=grey ctermfg=black guibg=gray80 guifg=#000000

"autocmd VimEnter * execute "split | resize " . (winheight(0) * 4/5)
"autocmd VimEnter * execute "vsplit | vertical resize " . (winwidth(0) * 7/10)

hi Normal guibg=#282a36

set guioptions-=L

filetype on
filetype plugin on

"set renderoptions=type:directx,renmode:5,taamode:1,gamma:2.2
"set renderoptions=type:directx,renmode:5
"autocmd VimEnter * NERDTree


nmap ff <Plug>(easymotion-s2)
"hi link EasyMotionTarget Error
hi link EasyMotionTarget2First Search
hi link EasyMotionTarget2Second Search
"hi link EasyMotionShade Comment
let g:EasyMotion_do_shade = 0
let g:EasyMotion_smartcase = 1

"set updatetime=500
"set redrawtime=1000

let g:tagbar_left=1
nnoremap <F10> :TagbarToggle<CR>
nnoremap <F2> <C-w>

autocmd VimEnter * execute "split | resize " . (winheight(0) * 4/5)
autocmd VimEnter * execute "vsplit | vertical resize " . (winwidth(0) * 7/10)

autocmd VimEnter * TagbarOpen

set updatetime=1000
autocmd CursorHold * silent! :TagbarUpdate
autocmd BufEnter * silent! :TagbarUpdate

"make comments dark green"
highlight Comment guifg=#6a9955 ctermfg=Red



nnoremap <SPACE> <Nop>

"Configure ALE"
" ?? ALE
let g:ale_enabled = 0

" ????????(?????????)
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
autocmd BufWritePost *.c,*.h ALELint

let g:ale_linters = {
\   'c': ['gcc'],
\   'cpp': ['gcc'],
\}

let g:ale_c_gcc_executable = 'C:\mingw-w64\bin\gcc'
let g:ale_cpp_gcc_executable = 'C:\mingw-w64\bin\g++'


let g:ale_hover_to_floating_preview = 1
let g:ale_cpp_gcc_options = '-Wall -Wextra -std=c++17 -I../Include/ -I../../../RealTimeApplications_Common/Include/'


let g:ale_c_cc_options = '-Wall -Wextra -std=c11 
							\-I"C:/WindRiver/vxworks-6.4/target/usr/h/wrn/coreip/" 		
							\-I"C:/WindRiver/vxworks-6.4/target/h/"  
							\-I"C:/WindRiver/vxworks-6.4/target/h/vxWorks.h"  
							\-I"C:/WindRiver/vxworks-6.4/target/usr/h/"  
							\-I"C:/WindRiver/vxworks-6.4/target/h/wrn/coreip"  
							\-I"C:/WindRiver/vxworks-6.4/target/usr/h/wrn/coreip/"  
							\-I"C:/WindRiver/vxworks-6.4/target/usr/h/wrn/coreip/net" 
							\-I../../../RealTimeApplications_Common/Include/ 
							\-I../Include/  
							\-I../../flNetReceive/ 
							\-I../../LINAC/Include/ab_super.h 
							\-I../Include/  
							\-I../../flNetReceive/NetStruct.h 		 					
							\-I../../DEBUG/Include/  
							\-I../../PMAC/Include/ 
							\-I../../flNetReceive/  
							\-I../../MSG/Include/  
							\-I../../INIT/Include/  
							\-I../../ALARM/Include/  
							\-I../../MDP/Include/  
							\-I../../MSG/Include/  
							\-I../../MathUtil/Include/  
							\-I../../DOSE/Include/ 
							\-I../../LINAC/Include/  
							\-I../../AMU/Include/  
							\-I../../VAC/Include/  
							\-I../../IC/Include/ 
							\-I../../ARB/Include/  
							\-I../../EL_SH/Include/  
							\-I../../IO_Sys_Defines/Include/  
							\-I../../IO_Sys/Include/  
							\-I../../IO_Sys/Include/  
							\-I"C:/ACE_TAO/ACE_wrappers/"  
							\-I../../INIT/Include/ 
							\-I../Include/ '

highlight ALEErrorHighlight ctermfg=Red guifg=Red
autocmd FileType alepreview syntax match ALEErrorHighlight /error/

" ???????????
augroup BoldBrackets
  autocmd!
  autocmd BufEnter * call matchadd('BoldBracketsGroup', '[(){}\[\]]')
augroup END

" ??????
hi BoldBracketsGroup gui=bold cterm=bold


highlight Search guibg=lightblue guifg=black
highlight Statement guifg=skyblue

set pumheight=10

highlight StartifyFile    ctermfg=111 guifg=lightsteelblue
highlight StartifyPath    ctermfg=245 guifg=gray80

highlight qfDirectory guifg=yellow
highlight qfFileName guifg=lightsteelblue
highlight QuickFixLine guifg=black

highlight TagbarMacro ctermfg=Magenta guifg=Purple

au FileType c,cpp,objc,objcpp call rainbow#load()

